const container = document.getElementById('container');
const canvas = document.getElementById('canvas1');
const file = document.getElementById('fileupload');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

const ctx = canvas.getContext('2d');
let audioSource;
let analyzer;

container.addEventListener('click', function () {
    const audio1 = document.getElementById('audio1');
    audio1.src = 'data:audio/x-wav;base64,';
    const audioCtx = new AudioContext();
    audio1.play();
    audioSource = audioCtx.createMediaElementSource(audio1); //create audio node, sets audio1 var to our audio source
    analyzer = audioCtx.createAnalyser();
    audioSource.connect(analyzer);
    analyzer.connect(audioCtx.destination);

    analyzer.fftSize = 1024; //controls how many visual "things" are drawn on the screen divided by 2
    //bufferLen is fftSize/2
    const bufferLen = analyzer.frequencyBinCount;//read only property, contains data values that is stores in data analyzer file
    const dataArr = new Uint8Array(bufferLen); //contains only elements that are 8 bit ints

    //bar visualizer
    //const barWidth = (canvas.width/2) / bufferLen;
    const barWidth = 17;
    let barHeight;
    let x;
    function animate() {
        x = 0;
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        analyzer.getByteFrequencyData(dataArr);
        //drawVisualizer(bufferLen, x, barWidth, barHeight, dataArr);
        drawCircle(bufferLen, x, barWidth, barHeight, dataArr)
        requestAnimationFrame(animate); //recursion animation loop
    }
    animate();
});
//add it so that you can put any youtube link in and
//it autodownloads to mp3 and then adds it to the file

//add so spotify is embeded and it syncs to whatever song you have playinh
file.addEventListener('change', function () {
    const files = this.files;
    const audio1 = document.getElementById("audio1");
    audio1.src = URL.createObjectURL(files[0]);
    audio1.load();
    audio1.play();
    audioSource = audioCtx.createMediaElementSource(audio1);
    analyzer = audioCtx.createAnalyser();
    audioSource.connect(analyzer);
    analyzer.connect(audioCtx.destination);

    analyzer.fftSize = 2048;
    const bufferLen = analyzer.frequencyBinCount;
    const dataArr = new Uint8Array(bufferLen);

    //const barWidth = (canvas.width/2) / bufferLen;
    const barWidth = 17;
    let barHeight;
    let x;
    function animate() {
        x = 0;
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        analyzer.getByteFrequencyData(dataArr);
        //drawVisualizer(bufferLen, x, barWidth, barHeight, dataArr);
        drawCircle(bufferLen, x, barWidth, barHeight, dataArr);
        requestAnimationFrame(animate);
    }
    animate();
});

//mirrored bar
function drawVisualizer(bufferLen, x, barWidth, barHeight, dataArr) {
    //mirror left
    for (let i = 0; i < bufferLen; i++) {
        barHeight = dataArr[i] * 2;
        const r = i * barHeight/10;
        const g = i/2;
        const b = barHeight/2;
        //caps on top
        ctx.fillStyle='white'
        ctx.fillRect(canvas.width/2-x,canvas.height-barHeight-20,barWidth,15)
        //color visualizer
        ctx.fillStyle = 'rgb(' + r + ',' + b + ','+ g + ')';
        ctx.fillRect(canvas.width/2 - x, canvas.height - barHeight, barWidth, barHeight);
        x += barWidth;
    }
    //mirror right
    for (let i = 0; i < bufferLen; i++) {
        barHeight = dataArr[i] * 2;
        const r = i * barHeight/10;
        const g = i/2;
        const b = barHeight/2;
        ctx.fillStyle='white'
        ctx.fillRect(x,canvas.height-barHeight-20,barWidth,15)
        ctx.fillStyle = 'rgb(' + r + ',' + b + ','+ g + ')';
        ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);
        x += barWidth;
    }
}
//circle
function drawCircle(bufferLen, x, barWidth, barHeight, dataArr) {
    //mirror left
    for (let i = 0; i < bufferLen; i++) {
        barHeight = dataArr[i] *1.5;
        ctx.save();
        ctx.translate(canvas.width/2, canvas.height/2);
        // + sign makes extend from center
        // * sign makes it rotate around center
        ctx.rotate(i * Math.PI*10 / bufferLen);
        const hue = i * 1.25;
        ctx.fillStyle = 'hsl(' + hue + ',100%,'+ barHeight/3+'%)';
        ctx.fillRect( 0,0, barWidth, barHeight);
        x += barWidth;
        ctx.restore();
    }
}
